package: org.robovm.apple.coredata
include: [foundation.yaml]
library: CoreData
framework: CoreData
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/CoreData.framework/Headers/CoreData.h
typedefs: {}
enums:
    NSAttributeType: {first: NSUndefinedAttributeType, suffix: AttributeType, type: MachineUInt}
    NSCoreDataError: {first: NSManagedObjectValidationError, suffix: Error}
    NSDeleteRule: {first: NSNoActionDeleteRule, suffix: DeleteRule, type: MachineUInt}
    NSEntityMappingType: {first: NSUndefinedEntityMappingType, suffix: EntityMappingType, type: MachineUInt}
    NSFetchedResultsChangeType: {first: NSFetchedResultsChangeInsert, type: MachineUInt}
    NSFetchRequestResultType: {first: NSManagedObjectResultType, suffix: ResultType, type: MachineUInt}
    NSManagedObjectContextConcurrencyType: {first: NSConfinementConcurrencyType, suffix: ConcurrencyType, type: MachineUInt}
    NSMergePolicyType: {first: NSErrorMergePolicyType, suffix: MergePolicyType, type: MachineUInt}
    NSPersistentStoreRequestType: {first: NSFetchRequestType, suffix: RequestType, type: MachineUInt}
    NSPersistentStoreUbiquitousTransitionType: {}
    NSSnapshotEventType: {first: NSSnapshotEventUndoInsertion, type: MachineUInt, bits: true}
    # Don't know what to do with this one
    Ignored: {first: NSFetchRequestExpressionType, exclude: true}
classes:

    ^NSAtomicStore$: {}
    ^NSAtomicStoreCacheNode$: {}
    ^NSAttributeDescription$: {}
    ^NSEntityDescription$: {}
    ^NSEntityMapping$: {}
    ^NSEntityMigrationPolicy$: {}
    ^NSExpressionDescription$: {}
    ^NSFetchedPropertyDescription$: {}
    ^NSFetchedResultsController$: {}
    ^NSFetchRequest$:
        methods:
            '-init$': {exclude: true}
    ^NSFetchRequestExpression$: {}
    ^NSIncrementalStore$: {}
    ^NSIncrementalStoreNode$: {}
    ^NSManagedObject$: {}
    ^NSManagedObjectContext$: {}
    ^NSManagedObjectID$: {}
    ^NSManagedObjectModel$:
        methods:
            '-init$': {exclude: true}
    ^NSMappingModel$: {}
    ^NSMergeConflict$: {}
    ^NSMergePolicy$: {}
    ^NSMigrationManager$: {}
    ^NSPersistentStore$: {}
    ^NSPersistentStoreCoordinator$: {}
    ^NSPersistentStoreRequest$: {}
    ^NSPropertyDescription$: {}
    ^NSPropertyMapping$: {}
    ^NSRelationshipDescription$: {}
    ^NSSaveChangesRequest$: {}

protocols:

    ^NSFetchedResultsControllerDelegate$: {}
    ^NSFetchedResultsSectionInfo$: {}

functions:

    # Make sure we don't miss any functions if new ones are introduced in a later version
    ^(NS.*)$:
        class: CoreData
        name: "Function__#{g[0]}"

values:

    ^NSMigration(.*)Key$:
        class: NSEntityMigrationPolicy
        name: "Key#{g[0]}"
        type: NSString

    ^NS(.*Objects)Key$:
        class: NSManagedObjectContext
        name: "Key#{g[0]}"
        type: NSString
    ^NSManagedObjectContext(.*)Notification$:
        class: NSManagedObjectContext
        name: "Notification#{g[0]}"

    ^NS(.*)MergePolicy$:
        class: NSMergePolicy
        name: "Policy#{g[0]}"
        readonly: true

    ^NS(.*)StoreType$:
        class: NSPersistentStoreCoordinator
        name: "StoreType#{g[0]}"
    ^NS(StoreType|StoreUUID)Key$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NS(.*PersistentStores)Key$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NSPersistentStore(UbiquitousTransitionType)Key$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NSPersistentStore(.*)Key$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NSPersistentStore(.*Option)$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NS(.*)PersistentStoreOption$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}Option"
        type: NSString
    ^NS(SQLite.*Option)$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NSStore(Model.*)Key$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NSPersistentStore(OSCompatibility)$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NS(ValidateXMLStoreOption|IgnorePersistentStoreVersioningOption|MigratePersistentStoresAutomaticallyOption|InferMappingModelAutomaticallyOption)$:
        class: NSPersistentStoreCoordinator
        name: "Key#{g[0]}"
        type: NSString
    ^NSPersistentStoreCoordinator(.*)Notification$:
        class: NSPersistentStoreCoordinator
        name: "Notification#{g[0]}"
    ^NSPersistentStore(DidImportUbiquitousContentChanges)Notification$:
        class: NSPersistentStoreCoordinator
        name: "Notification#{g[0]}"

    ^NS(.*)ErrorKey$:
        class: CoreData
        name: "ErrorKey#{g[0]}"
        type: NSString
    ^NS(DetailedErrors)Key$:
        class: CoreData
        name: "ErrorKey#{g[0]}"
        type: NSString
    ^NS(.*)ErrorDomain$:
        class: CoreData
        name: "ErrorDomain#{g[0]}"

    ^NSCoreData(VersionNumber)$:
        class: CoreData
        name: "#{g[0]}"
        readonly: true

    # Make sure we don't miss any values if new ones are introduced in a later version
    ^(k?NS.*)$:
        class: CoreData
        name: "Value__#{g[0]}"

constants:

    ^NSCoreData(VersionNumber.*)$:
        class: CoreData
        name: "#{g[0]}"

    # Make sure we don't miss any constants if new ones are introduced in a later version
    ^(k?NS.*)$:
        class: CoreData
        name: "Constant__#{g[0]}"
