package: org.robovm.apple.foundation
include: [corefoundation.yaml]
library: Foundation
framework: Foundation
clang_args: ['-x', 'objective-c']
header: /System/Library/Frameworks/Foundation.framework/Headers/Foundation.h
typedefs:
    BOOL: boolean
    NSInteger: MachineSInt
    NSUInteger: MachineUInt
    _NSZone: NSZone
    id: NSObject
    Class: ObjCClass
    "Protocol *": ObjCProtocol
    "NSString *": String
    "NSString **": "NSString.NSStringPtr"
    "BOOL *": BytePtr
enums:
#    NSTextAlignment: {}
#    NSWritingDirection: {}

    NSActivityOptions: {}
    NSAttributedStringEnumerationOptions: {}
    NSBinarySearchingOptions: {}
    NSBundleExecutableArchitectureType: { first: NSBundleExecutableArchitectureI386 }
    NSCalculationError: {}
    NSCalendarOptions: {}
    NSCalendarUnit: {}
    NSComparisonPredicateModifier: {}
    NSComparisonPredicateOptions: {}
    NSComparisonResult: {}
    NSCompoundPredicateType: {}
    NSDataBase64DecodingOptions: { prefix: NSDataBase64Decoding }
    NSDataBase64EncodingOptions: {}
    NSDataReadingOptions: {}
    NSDataSearchOptions: {}
    NSDataWritingOptions: {}
    NSDateFormatterBehavior: {}
    NSDateFormatterStyle: {}
    NSDateFormatterStyle: {}
    NSDirectoryEnumerationOptions: {}
    NSExpressionType: {}
    NSFileCoordinatorReadingOptions: {}
    NSFileCoordinatorWritingOptions: {}
    NSFileManagerItemReplacementOptions: {}
    NSFileVersionAddingOptions: { prefix: NSFileVersionAdding }
    NSFileVersionReplacingOptions: { prefix: NSFileVersionReplacing }
    NSFileWrapperReadingOptions: {}
    NSFileWrapperWritingOptions: {}
    NSHTTPCookieAcceptPolicy: {}
    NSKeyValueChange: {}
    NSKeyValueObservingOptions: {}
    NSKeyValueSetMutationKind: {}
    NSLinguisticTaggerOptions: {}
    NSLocaleLanguageDirection: {}
    NSMatchingOptions: {}
    NSNetServiceOptions: {}
    NSNumberFormatterBehavior: {}
    NSNumberFormatterPadPosition: {}
    NSNumberFormatterRoundingMode: {}
    NSNumberFormatterStyle: {}
    NSOperationQueuePriority: {}
    NSPostingStyle: {}
    NSPredicateOperatorType: {}
    NSPropertyListFormat: {}
    NSPropertyListMutabilityOptions: {}
    NSRegularExpressionOptions: {}
    NSRoundingMode: {}
    NSSearchPathDirectory: {}
    NSSearchPathDomainMask: {}
    NSStreamEvent: {}
    NSStreamStatus: {}
    NSStringCompareOptions: {}
    NSStringEncodingConversionOptions: {}
    NSStringEncodings: { first: NSASCIIStringEncoding }
    NSStringEnumerationOptions: {}
    NSTextCheckingType: {}
    NSTimeZoneNameStyle: {}
    NSURLBookmarkCreationOptions: {}
    NSURLBookmarkResolutionOptions: {}
    NSURLBookmarkResolutionOptions: {}
    NSURLCacheStoragePolicy: { first: NSURLCacheStorageAllowed, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    NSURLCredentialPersistence: {}
    NSURLError: { first: NSURLErrorUnknown }
    NSURLErrorCancelledReason: { first: NSURLErrorCancelledReasonUserForceQuitApplication }
    NSURLRequestCachePolicy: { first: NSURLRequestUseProtocolCachePolicy, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    NSURLRequestNetworkServiceType: { first: NSURLNetworkServiceTypeDefault, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    NSURLSessionAuthChallengeDisposition: {}
    NSURLSessionTaskState: {}
    NSVolumeEnumerationOptions: {}
    NSXMLParserError: {}

classes:
    ^NSRange$: {}
    NSDecimal: {}
    NSZone: {}
    NSFastEnumerationState: {}

    ^NS.*Internal$: { exclude: true }

    ^NSArray$:    
        methods:
            "-initWithArray:":
                visibility: protected
                constructor: false
                return_type: "@Pointer long"
            "-initWithObjects:count:":
                visibility: protected
                constructor: false
                return_type: "@Pointer long"
                parameters:
                    objects:
                        type: "@Pointer long"
            "-containsObject:":
                visibility: protected
            "-count":
                visibility: protected
            "-objectAtIndex:":
                visibility: protected
            "-indexOfObject:":
                visibility: protected
            "-subarrayWithRange:":
                visibility: protected
    ^NSAssertionHandler$: {}
    ^NSAttributedString$: {}
    ^NSAutoreleasePool$:
        methods:
            "^-drain$": {}
            "^+.*$": { exclude: true }
            "^-.*$": { exclude: true }
    ^NSBlockOperation$: {}
    ^NSBundle$:
        methods:
            "+mainBundle":
                name: getMainBundle
            "-bundlePath":
                name: getBundlePath
            "-resourcePath":
                name: getResourcePath
            "-infoDictionary":
                name: getInfoDictionary
            '^\+pathForResource:ofType:inDirectory:$':
                name: findResourcePath
            '^\+pathsForResourcesOfType:inDirectory:$':
                name: findResourcesPaths
            '-pathForResource:ofType:inDirectory:$':
                name: findResourcePathInSubPath
            '-pathsForResourcesOfType:inDirectory:$':
                name: findResourcesPathsInSubPath
    ^NSCache$: {}
    ^NSCachedURLResponse$:
        methods:
            "-storagePolicy":
                return_type: NSURLCacheStoragePolicy
            "-initWithResponse:data:userInfo:storagePolicy:":
                parameters:
                    storagePolicy:
                        type: NSURLCacheStoragePolicy
    ^NSCalendar$: {}
    ^NSCharacterSet$: {}
    ^NSCoder$: {}
    ^NSComparisonPredicate$: {}
    ^NSCompoundPredicate$: {}
    ^NSCondition$:
        methods:
            "^-wait$":
                name: await
            "^-waitUntilDate:$":
                name: await
    ^NSConditionLock$: {}
    ^NSCountedSet$: {}
    ^NSData$: {}
    ^NSDataDetector$: {}
    ^NSDate$:
        methods:
            '^\+timeIntervalSinceReferenceDate$':
                exclude: true
    ^NSDateComponents$: {}
    ^NSDateFormatter$: {}
    ^NSDecimalNumber$: {}
    ^NSDecimalNumberHandler$: {}
    ^NSDictionary$:
        methods:
            "+dictionaryWithContentsOfFile:":
                name: fromFile
                return_type:
                    NSDictionary
            "+dictionaryWithContentsOfURL:":
                name: fromUrl
                return_type:
                    NSDictionary
            "-initWithDictionary:":
                visibility: protected
                constructor: false
                return_type: "@Pointer long"
            "-initWithObjects:forKeys:":
                visibility: protected
                constructor: false
                return_type: "@Pointer long"
            "-allKeys":
                visibility: protected
            "-allValues":
                visibility: protected
            "-count":
                visibility: protected
            "-objectForKey:":
                visibility: protected
            "-writeToFile:atomically:":
                name: writeToFile
    ^NSDirectoryEnumerator$: {}
    ^NSEnumerator$:
        methods:
            "-allObjects":
                return_type: NSArray<T>
            "-nextObject":
                name: _nextObject
                visibility: protected
    ^NSError$: {}
    ^NSException$: {}
    ^NSExpression$: {}
    ^NSFileCoordinator$: {}
    ^NSFileHandle$: {}
    ^NSFileManager$: {}
    ^NSFileVersion$: {}
    ^NSFileWrapper$: {}
    ^NSFormatter$: {}
    ^NSHashTable$: {}
    ^NSHTTPCookie$: {}
    ^NSHTTPCookieStorage$: {}
    ^NSHTTPURLResponse$: {}
    ^NSIndexPath$:
        methods:
            "-initWithIndex:":
            "-length":
                name: getLength
            "-indexAtPosition:":
                name: getIndexAt
            "-indexPathByAddingIndex:":
                name: addIndex
            "-indexPathByRemovingLastIndex":
                name: removeLastIndex
    ^NSIndexSet$: {}
    ^NSInputStream$: {}
    ^NSInvocation$: {}
    ^NSInvocationOperation$: {}
    ^NSKeyedArchiver$:
        methods:
            '^\+classNameForClass:$':
                name: getDefaultClassName
            '^\+setClassName:forClass:$':
                name: setDefaultClassName
    ^NSKeyedUnarchiver$:
        methods:
            '^\+classForClassName:$':
                name: getDefaultClass
            '^\+setClass:forClassName:$':
                name: setDefaultClass
    ^NSLinguisticTagger$: {}
    ^NSLocale$: {}
    ^NSLock$: {}
    ^NSMachPort$:
        methods:
            '-delegate$': { exclude: true }
            '-setDelegate:$': { exclude: true }
    ^NSMapTable$: {}
    ^NSMessagePort$: {}
    ^NSMetadataItem$: {}
    ^NSMetadataQuery$: {}
    ^NSMetadataQueryAttributeValueTuple$: {}
    ^NSMetadataQueryResultGroup$: {}
    ^NSMethodSignature$: {}
    ^NSMutableArray$: {}
    ^NSMutableAttributedString$: {}
    ^NSMutableCharacterSet$: {}
    ^NSMutableData$: {}
    ^NSMutableDictionary$:
        skip_def_constructor: true
        methods:
            "-setObject:forKey:":
                visibility: protected
                parameters:
                    aKey:
                        type: NSObject
            "-removeAllObjects":
                visibility: protected
            "-removeObjectForKey:":
                visibility: protected
            "-initWithCapacity:":
    ^NSMutableIndexSet$: {}
    ^NSMutableOrderedSet$: {}
    ^NSMutableSet$: {}
    ^NSMutableString$: {}
    ^NSMutableURLRequest$: {}
    ^NSNetService$: {}
    ^NSNetServiceBrowser$: {}
    ^NSNotification$: {}
    ^NSNotificationCenter$: {}
    ^NSNotificationQueue$: {}
    ^NSNull$:
        methods:
            "+null":
                name: getNull
    ^NSNumber$:
        methods:
            "+numberWithBool:":
                name: valueOf
            "+numberWithChar:":
                name: valueOf
            "+numberWithDouble:":
                name: valueOf
            "+numberWithFloat:":
                name: valueOf
            "+numberWithInt:":
                name: valueOf
            "+numberWithShort:":
                name: valueOf
            "+numberWithUnsignedShort:":
                name: valueOf
                parameters:
                    value:
                        type: char
            "+numberWithLongLong:":
                name: valueOf
            "+numberWith.*$":
                exclude: true
            "-boolValue":
                name: booleanValue
            "-charValue":
                name: byteValue
            "-shortValue":
                name: shortValue
            "-unsignedShortValue":
                name: charValue
                return_type: char
            "-longLongValue":
                name: longValue
            "-longValue":
                exclude: true
            "-integerValue":
                exclude: true
            "^-unsigned.*Value$":
                exclude: true
    ^NSNumberFormatter$: {}
    ^NSObject$:
        skip_def_constructor: true
        skip_skip_init_constructor: true
        methods:
            "^\\+.*$": { exclude: true }
            "-retain":
                visibility: protected
            "-release":
                visibility: protected
            # "-init":
            #     visibility: private
            #     constructor: false
            #     return_type: '@Pointer long'
            "-description":
            "-isEqual:":
                visibility: protected
            "-hash":
                visibility: protected
            "-class$": { exclude: true }
            "-superclass$": { exclude: true }
            "-finalize$": { exclude: true }
            "-self$": { exclude: true }
            "-zone$": { exclude: true }
            "-autorelease$": { exclude: true }
            "-conformsToProtocol:$": { exclude: true }
    ^NSOperation$: {}
    ^NSOperationQueue$: {}
    ^NSOrderedSet$: {}
    ^NSOrthography$: {}
    ^NSOutputStream$: {}
    ^NSPipe$: {}
    ^NSPointerArray$: {}
    ^NSPointerFunctions$: {}
    ^NSPort$: {}
    ^NSPortMessage$:
        extends: NSObject
    ^NSPredicate$: {}
    ^NSProcessInfo$: {}
    ^NSPropertyListSerialization$: {}
    ^NSProxy$: { exclude: true }
    ^NSRecursiveLock$: {}
    ^NSRegularExpression$: {}
    ^NSRunLoop$:
        methods:
            "+currentRunLoop":
                name: getCurrent
            "+mainRunLoop":
                name: getMain
            "-currentMode":
                name: getCurrentMode
            "-runMode:beforeDate:":
                name: runUntil
            "-runUntilDate:":
                name: runUntil
            "-performSelector:target:argument:order:modes:":
                name: perform
            "-cancelPerformSelectorsWithTarget:":
                name: cancel
            "-cancelPerformSelector:target:argument:":
                name: cancel
            "-addPort:forMode:":
                exclude: true
            "-removePort:forMode:":
                exclude: true
            "-getCFRunLoop":
                exclude: true
    ^NSScanner$: {}
    ^NSSet$:
        methods:
            "-initWithArray:":
                visibility: protected
                constructor: false
                return_type: "@Pointer long"
            "-initWithSet:":
                visibility: protected
                constructor: false
                return_type: "@Pointer long"
            "-initWithObjects:count:":
                visibility: protected
                constructor: false
                return_type: "@Pointer long"
                parameters:
                    objects:
                        type: "@Pointer long"
            "-count":
                visibility: protected
            "-member:":
                visibility: protected
            "-objectEnumerator":
                visibility: protected
    ^NSSortDescriptor$: {}
    ^NSStream$: {}
    ^NSString$:
        methods:
            "-initWithCharactersNoCopy:length:freeWhenDone:":
                visibility: private
                parameters:
                    characters:
                        type: "@Pointer long"
            "-characterAtIndex:":
            "-length":
            "-getCharacters:range:":
                visibility: private
                parameters:
                    buffer:
                        type: "@Pointer long"
    ^NSTextCheckingResult$: {}
    ^NSThread$:
        methods:
            '^\+threadPriority$': { exclude: true }
            '^\+setThreadPriority:$': { exclude: true }
            '^\+isMainThread$': { exclude: true }
            '^\+callStack.*$': { exclude: true }
    ^NSTimer$: {}
    ^NSTimeZone$: {}
    ^NSUbiquitousKeyValueStore$: {}
    ^NSUndoManager$: {}
    ^NSURL$: {}
    ^NSURLAuthenticationChallenge$: {}
    ^NSURLCache$: {}
    ^NSURLConnection$: {}
    ^NSURLCredential$: {}
    ^NSURLCredentialStorage$: {}
    ^NSURLProtectionSpace$: {}
    ^NSURLProtocol$: {}
    ^NSURLRequest$: {}
    ^NSURLResponse$: {}
    ^NSURLSession$: {}
    ^NSURLSessionConfiguration$: {}
    ^NSURLSessionDataTask$: {}
    ^NSURLSessionDownloadTask$: {}
    ^NSURLSessionTask$: {}
    ^NSURLSessionUploadTask$: {}
    ^NSUserDefaults$: {}
    ^NSUUID$:
        methods:
            "-UUIDString":
                name: asString
    ^NSValue$: {}
    ^NSValueTransformer$: {}
    ^NSXMLParser$: {}

protocols:
    ^NSCacheDelegate$: {}
    ^NSCoding$:
        methods:
            "^-initWithCoder:$":
                exclude: true
    ^NSCopying$: {}
    ^NSDecimalNumberBehaviors$: {}
    ^NSErrorRecoveryAttempting$: {}
#    ^NSFastEnumeration$: {}
    ^NSFileManagerDelegate$: {}
    ^NSFilePresenter$: {}
    ^NSKeyedArchiverDelegate$: {}
    ^NSKeyedUnarchiverDelegate$: {}
    ^NSKeyValueCoding$: {}
    ^NSKeyValueObserving$: {}
    ^NSLocking$: {}
    ^NSMachPortDelegate$: {}
    ^NSMetadataQueryDelegate$: {}
    ^NSMutableCopying$: {}
    ^NSNetServiceBrowserDelegate$: {}
    ^NSNetServiceDelegate$: {}
    ^NSObject$:
        name: NSObjectProtocol
        methods:
            "-.*":
                exclude: true
    ^NSPortDelegate$: {}
#    ^NSSecureCoding$: {}
    ^NSStreamDelegate$: {}
    ^NSURLAuthenticationChallengeSender$: {}
    ^NSURLConnectionDataDelegate$: {}
    ^NSURLConnectionDelegate$: {}
    ^NSURLConnectionDownloadDelegate$: {}
    ^NSURLProtocolClient$: {}
    ^NSURLSessionDataDelegate$: {}
    ^NSURLSessionDelegate$: {}
    ^NSURLSessionDownloadDelegate$: {}
    ^NSURLSessionTaskDelegate$: {}
    ^NSXMLParserDelegate$: {}

functions:
    ^NS.*$: {}

values: 
    ^NS(.*Calendar)$:
        class: NSCalendar
        name: "#{g[0]}"
    ^NSFileHandle(.*Notification)$:
        class: NSFileHandle
        name: "#{g[0]}"
    ^NSFileHandle(.*)$:
        class: NSFileHandle
        name: "#{g[0]}"
    ^NSFile(AppendOnly|Busy|CreationDate|DeviceIdentifier|ExtensionHidden|GroupOwnerAccountID|GroupOwnerAccountName)$:
        class: NSFileManager
        type: NSString
        name: "#{g[0]}"
    ^NSFile(HFSCreatorCode|HFSTypeCode|Immutable|ModificationDate|OwnerAccountID|OwnerAccountName|PosixPermissions)$:
        class: NSFileManager
        type: NSString
        name: "#{g[0]}"
    ^NSFile(ReferenceCount|Size|SystemFileNumber|SystemNumber|Type)$:
        class: NSFileManager
        type: NSString
        name: "#{g[0]}"
    ^NSMetadataItem(.*Key)$:
        class: NSMetadataItem
        type: NSString
        name: "#{g[0]}"
    ^NSMetadataUbiquitousItem(.*Key)$:
        class: NSMetadataItem
        type: NSString
        name: "Ubiquitous#{g[0]}"
    ^NSURLCredential(StorageRemoveSynchronizableCredentials)$:
        class: NSURLCredential
        type: NSString
        name: "#{g[0]}"
    ^NSURLCredential(.*)$:
        class: NSURLCredential
        name: "#{g[0]}"
    ^NSURLProtectionSpace(.*)Proxy$:
        class: NSURLProtectionSpace
        name: "ProxyType#{g[0]}"
    ^NSURLProtectionSpace(HTTP|HTTPS|FTP)$:
        class: NSURLProtectionSpace
        name: "ProtocolType#{g[0]}"
    ^NSURL(Authentication.*)$:
        class: NSURLProtectionSpace
        name: "#{g[0]}"
    ^NSURLSession(DownloadTaskResumeData)$:
        class: NSURLSession
        type: NSString
        name: "#{g[0]}"
    ^NSURLError(BackgroundTaskCancelledReasonKey)$:
        class: NSURLSession
        type: NSString
        name: "#{g[0]}"
    ^NSURL(.*Key)$:
        class: NSURL
        type: NSString
        name: "#{g[0]}"
    ^NSURL(.*)$:
        class: NSURL
        name: "#{g[0]}"
    ^NS((Global|Argument|Registration)Domain)$:
        class: NSUserDefaults
        name: "#{g[0]}"
    # Make sure we don't miss any values if new ones are introduced in a later Foundation
    ^(NS.*)$:
        class: Foundation
        name: "#{g[0]}"

constants:
    ^NS(OpenStepUnicodeReservedBase)$: { name: "#{g[0]}" }
    ^NSURLResponse(.*)$:
        class: NSURLResponse
        name: "#{g[0]}"
    ^NSFoundation(.*)$:
        class: Foundation
        name: "#{g[0]}"
    NSWrapCalendarComponents: { exclude: true }
    # Make sure we don't miss any constants if new ones are introduced in a later Foundation
    ^(NS.*)$:
        class: Foundation
        name: "#{g[0]}"
